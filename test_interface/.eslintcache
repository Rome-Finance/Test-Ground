[{"/home/darkdark/block_projs/Test-Ground/test_interface/src/reportWebVitals.js":"1","/home/darkdark/block_projs/Test-Ground/test_interface/src/App.js":"2","/home/darkdark/block_projs/Test-Ground/test_interface/src/index.js":"3","/home/darkdark/block_projs/Test-Ground/test_interface/src/web3.js":"4","/home/darkdark/block_projs/Test-Ground/test_interface/src/Mushroom.js":"5","/home/darkdark/block_projs/Test-Ground/test_interface/src/Rome.js":"6","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Invest.js":"7","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Liquidate.js":"8","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Dashboard.js":"9","/home/darkdark/block_projs/Test-Ground/test_interface/src/About.js":"10","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Navigation.js":"11","/home/darkdark/block_projs/Test-Ground/test_interface/src/Landing.js":"12"},{"size":362,"mtime":1606203103037,"results":"13","hashOfConfig":"14"},{"size":775,"mtime":1606203102997,"results":"15","hashOfConfig":"14"},{"size":500,"mtime":1606203103021,"results":"16","hashOfConfig":"14"},{"size":198,"mtime":1606204989948,"results":"17","hashOfConfig":"14"},{"size":12199,"mtime":1606206154857,"results":"18","hashOfConfig":"14"},{"size":8349,"mtime":1606250354082,"results":"19","hashOfConfig":"14"},{"size":6549,"mtime":1606204382964,"results":"20","hashOfConfig":"14"},{"size":3989,"mtime":1606288756321,"results":"21","hashOfConfig":"14"},{"size":4789,"mtime":1606434900308,"results":"22","hashOfConfig":"14"},{"size":1832,"mtime":1606956782398,"results":"23","hashOfConfig":"14"},{"size":283,"mtime":1606957179271,"results":"24","hashOfConfig":"14"},{"size":5965,"mtime":1606956603333,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"svof1w",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/darkdark/block_projs/Test-Ground/test_interface/src/reportWebVitals.js",[],["59","60"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/App.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/index.js",[],["61","62"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/web3.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/Mushroom.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/Rome.js",[],["63","64"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Invest.js",["65","66","67"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\nimport { Grid, Paper } from '@material-ui/core';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n}\r\n\r\nclass Invest extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            amount : 0,\r\n            waitingOnContract: false\r\n        };\r\n\r\n        //have to bind functions to this. still dont know why after all these projects lmao,\r\n        //but dont forget it or things break!\r\n        this.ButtonText = this.ButtonText.bind(this);\r\n        /*\r\n        Do not call the update function in the constructor. Only the render function is called when the\r\n        parent tells child to rerender, so anything in the constructor will not be called again.\r\n         */\r\n\r\n    }\r\n\r\n\r\n\r\n    invest = async event =>{\r\n        console.log(\"EYYYYYY\");\r\n\r\n        event.preventDefault();\r\n        try {\r\n            var accounts;\r\n\r\n            this.props.UpdateWaitingOnContract(true);\r\n\r\n            await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n\r\n            console.log(accounts[0]);\r\n\r\n            //const batch = new web3.eth.BatchRequest();\r\n\r\n            const weiValue = web3.utils.toWei(this.state.amount, 'ether');\r\n\r\n            /*\r\n            ------------------------------------------------------------------------------------------\r\n            theres a lot of commented out code in this section, but im leaving it because\r\n            it is a working example of how to use web3 batches correctly, and I might need that later\r\n            ------------------------------------------------------------------------------------------\r\n             */\r\n\r\n            /*\r\n            batch.add(Rome.methods.approve(Mushroom.options.address, weiValue).send.request({from: accounts[0]}, callBack));\r\n            batch.add(Mushroom.methods.stake(weiValue).send.request({from: accounts[0]}, callBack));\r\n            */\r\n\r\n            await Rome.methods.approve(Mushroom.options.address, weiValue).send({from: accounts[0]});\r\n            await Mushroom.methods.stake(weiValue).send({from: accounts[0]});\r\n\r\n\r\n\r\n            /*\r\n            .call(from:accounts[0]))\r\n            batch.add(Mushroom.methods\r\n                .mint(this.state.amount) // contains the user account name\r\n                .send({\r\n                    from: accounts[0]\r\n                }));\r\n\r\n             */\r\n            // batches let you put more than one transaction together to be processed at one\r\n            // need them for approve transfer, then transferfrom when using erc tokens\r\n            //await batch.execute();\r\n\r\n            this.props.UpdateWaitingOnContract(false);\r\n\r\n            this.props.Update();\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR IN SENDING TO CHAIN \" + err);\r\n            this.props.UpdateWaitingOnContract(false);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /*\r\n    Dynamically render the button to have different text on it when the contract is waiting for transactions to come back\r\n\r\n    this function returns a div, which allows it to be passed as a component, and for me to type in words without a string\r\n    could maybe do the same thing without div and passing a literal string, then dealing with string in render,\r\n    but this way seems to look a feel cleaner\r\n     */\r\n    ButtonText() {\r\n        if (this.props.waitingOnContract) {\r\n            return <div>Waiting on Transactions.............</div>;\r\n        }\r\n        return <div>Invest Tokens</div>;\r\n    }\r\n\r\n\r\n    render() {\r\n        /*\r\n        Anything that needs to happen every rerender need to get called here before the return!!!\r\n         */\r\n        return(\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                    style={{\r\n                    backgroundColor: '#fd00ff'\r\n                }}>\r\n\r\n                    <Grid item xs={3}>\r\n                    <h4 style={{ color: 'Black', fluid: false }}>Invest USDC </h4 >\r\n                    </Grid>\r\n                    {/*\r\n                     Form that updates a value in order for the chain call function to know how much\r\n                     to put into the invest function of the contract when its called later on the button press\r\n\r\n                     uses an event because the event will contain what value the text box's contents just changed to\r\n                     I think it makes it faster or something. Could maybe do it with just using the value of\r\n                     the text box input and throwing it into onchange without the event?\r\n                     Maybe the only way to get the value out is with event? Maybe just fancy pants programmer code\r\n                     back from jordan in ecocap that doesnt need to be that complex?\r\n\r\n                    */}\r\n                    <Grid item xs={6}>\r\n                        <Form.Field >\r\n                            <input\r\n                                //style={{width:'80%'}}\r\n                                placeholder=\"How many USDC tokens would you like to invest?\"\r\n                                onChange={event =>\r\n                                    this.setState({\r\n                                        amount: event.target.value\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Field>\r\n                    </Grid>\r\n\r\n\r\n                    {/*<h4 style={{ color: 'Black', margin: 0, }} align=\"center\">   Tokens will be used for investments and you will get MUSH tokens based on your share of the investment pool. (Approve Both Transactions)</h4>*/}\r\n\r\n                    {/*\r\n                     Button that calls function to send invest transactions to chain\r\n                    */}\r\n                    <Grid item xs={3}>\r\n                    <button id={'setLocation'} className={'btn btn-md btn-success'} disabled={this.props.waitingOnContract} style={{color:'black'}} onClick={this.invest}>\r\n                        <span>{this.ButtonText()}</span>\r\n                    </button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Invest;\r\n","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Liquidate.js",["68"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n}\r\n\r\nclass Liquidate extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            amount : 0\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    invest = async event =>{\r\n        console.log(\"EYYYYYY\");\r\n\r\n        event.preventDefault();\r\n        try {\r\n            this.props.UpdateWaitingOnContract(true);\r\n            var accounts;\r\n            await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n\r\n            console.log(accounts[0]);\r\n\r\n            const batch = new web3.eth.BatchRequest();\r\n\r\n            const weiValue = web3.utils.toWei(this.state.amount, 'ether');\r\n\r\n            /*\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            */\r\n\r\n            batch.add(Mushroom.methods.unstake(weiValue).send.request({from: accounts[0]}, callBack));\r\n\r\n\r\n\r\n            /*\r\n            const params = { to: token.address, data: contractData, from: address };\r\n            batch.add(web3.eth.call.request(params, callBack));\r\n            */\r\n\r\n            /*\r\n            .call(from:accounts[0]))\r\n            batch.add(Mushroom.methods\r\n                .mint(this.state.amount) // contains the user account name\r\n                .send({\r\n                    from: accounts[0]\r\n                }));\r\n\r\n             */\r\n            // batches let you put more than one transaction together to be processed at one\r\n            // need them for approve transfer, then transferfrom when using erc tokens\r\n            await batch.execute();\r\n\r\n            this.props.UpdateWaitingOnContract(false);\r\n            //await Rome.methods.buyRome(this.state.amount).send({from: accounts[0], value: this.state.amount*10000000000000000, gas: 100000000000000});\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR IN SENDING TO CHAIN \" + err);\r\n            this.props.UpdateWaitingOnContract(false);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    ButtonText() {\r\n        if (this.props.waitingOnContract) {\r\n            return <div>Waiting on Transactions.............</div>;\r\n        }\r\n        return <div>Remove Funds</div>;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Card style={{\r\n                    backgroundColor: '#fd00ff'\r\n                }}>\r\n\r\n\r\n                    <h4 style={{ color: 'Black', fluid: false }}>Remove Funds</h4 >\r\n                    <Form.Field >\r\n                        <input\r\n                            style={{width:'80%'}}\r\n                            placeholder=\"How many Mushroom tokens would you like to exchange?\"\r\n                            onChange={event =>\r\n                                this.setState({\r\n                                    amount: event.target.value\r\n                                })\r\n                            }\r\n                        />\r\n                    </Form.Field>\r\n\r\n                    <h4 style={{ color: 'Black', margin: 0  }}>   Your mushrooms will be BURNED and you will receive an equivalent stake of the pool if funds are available, and not currently tied up in investments.</h4>\r\n                    <button id={'setLocation'} className={'btn btn-md btn-success'} disabled={this.props.waitingOnContract} style={{color:'black'}} onClick={this.invest}>\r\n                        <span>{this.ButtonText()}</span>\r\n                    </button>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Liquidate;\r\n",["69","70"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Dashboard.js",["71","72","73","74","75","76","77","78"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Invest from \"./Invest\";\r\nimport Liquidate from \"./Liquidate\";\r\nimport Container from \"react-bootstrap/Container\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n//here cause text-shadow css no like\r\nconst moneyBlack = {color: 'black', margin: 0, 'text-shadow': '0px 0px 2px #33cd0c'}\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n}\r\n\r\nclass Dashboard extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n        };\r\n    }\r\n\r\n\r\n    /*\r\n    calls a bunch of the view functions to get data about what cryptos are in the contract and owned by the user and stuff\r\n    stores these in class state/ component state? which one owns it?\r\n\r\n    updates the state, then things down in render actually display the values\r\n     */\r\n\r\n\r\n    /*\r\n    <pre style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC' }}>{'' +\r\n                    'Total MUSH Supply:      ${Total_Mush} MUSH\\n' +\r\n                    'Your MUSH Holdings:     ${this.state.UserMush} MUSH'}\r\n     */\r\n\r\n    render() {\r\n        /*\r\n        Never call something that sets state inside a render funciton. There was gore here.\r\n        Infinite recursion, bad code BAD CODE. Setting state rerenders which calls render again which\r\n        calls a thing that sets state again. Dont do it. UpdateStats moved to app class, 1 layer above.\r\n         */\r\n\r\n\r\n        return(\r\n            <div>\r\n                <h2 style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #33cd0c' }}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Total MUSH Supply\r\n                            </Col>\r\n                            <Col>\r\n                                <h2 style={moneyBlack}>\r\n                                    {this.props.TotalMush} MUSH\r\n                                </h2>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/><br/>\r\n                        <Row>\r\n                            <Col>\r\n                                Total USDC Holdings of this Contract\r\n                            </Col>\r\n                            <Col>\r\n                                <h2 style={moneyBlack}>\r\n                                    {this.props.TotalUsdc} USDC\r\n                                </h2>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/><br/>\r\n                        <Row>\r\n                            <Col>\r\n                                Estimated Value of all Mushroom Assets\r\n                            </Col>\r\n                            <Col>\r\n                                <h2 style={moneyBlack}>\r\n                                    ${this.props.EstimatedUsdcValue} USD\r\n                                </h2>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/><br/>\r\n                        <Row>\r\n                            <Col>\r\n                                Value of MUSH coin in USDC\r\n                            </Col>\r\n                            <Col>\r\n                                <h2 style={moneyBlack}>\r\n                                    {this.props.EstimatedUsdcValue/this.props.TotalMush} UDSC\r\n                                </h2>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/><br/>\r\n                        <Row>\r\n                            <Col>\r\n                                Your MUSH Holdings\r\n                            </Col>\r\n                            <Col>\r\n                                <h2 style={moneyBlack}>\r\n                                    {this.props.UserMush} MUSH\r\n                                </h2>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/><br/>\r\n                        <Row>\r\n                            <Col>\r\n                                Your USDC Holdings (outside this project)\r\n                            </Col>\r\n                            <Col>\r\n                                <h2 style={moneyBlack}>\r\n                                    {this.props.UserUsdc} UDSC\r\n                                </h2>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Container>\r\n                </h2>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Dashboard;\r\n",["79","80"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/About.js",["81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Navigation.js",[],["97","98"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/Landing.js",["99","100","101","102","103","104","105","106"],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"107","replacedBy":"113"},{"ruleId":"109","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":3,"column":9,"nodeType":"117","messageId":"118","endLine":3,"endColumn":13},{"ruleId":"115","severity":1,"message":"119","line":8,"column":16,"nodeType":"117","messageId":"118","endLine":8,"endColumn":21},{"ruleId":"115","severity":1,"message":"120","line":11,"column":10,"nodeType":"117","messageId":"118","endLine":11,"endColumn":18},{"ruleId":"115","severity":1,"message":"121","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":12},{"ruleId":"107","replacedBy":"122"},{"ruleId":"109","replacedBy":"123"},{"ruleId":"115","severity":1,"message":"124","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":12},{"ruleId":"115","severity":1,"message":"116","line":3,"column":9,"nodeType":"117","messageId":"118","endLine":3,"endColumn":13},{"ruleId":"115","severity":1,"message":"125","line":3,"column":15,"nodeType":"117","messageId":"118","endLine":3,"endColumn":19},{"ruleId":"115","severity":1,"message":"126","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":16},{"ruleId":"115","severity":1,"message":"121","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":12},{"ruleId":"115","severity":1,"message":"127","line":8,"column":8,"nodeType":"117","messageId":"118","endLine":8,"endColumn":14},{"ruleId":"115","severity":1,"message":"128","line":9,"column":8,"nodeType":"117","messageId":"118","endLine":9,"endColumn":17},{"ruleId":"115","severity":1,"message":"120","line":17,"column":10,"nodeType":"117","messageId":"118","endLine":17,"endColumn":18},{"ruleId":"107","replacedBy":"129"},{"ruleId":"109","replacedBy":"130"},{"ruleId":"115","severity":1,"message":"131","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":12},{"ruleId":"115","severity":1,"message":"124","line":3,"column":8,"nodeType":"117","messageId":"118","endLine":3,"endColumn":12},{"ruleId":"115","severity":1,"message":"127","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":14},{"ruleId":"115","severity":1,"message":"128","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":17},{"ruleId":"115","severity":1,"message":"132","line":6,"column":8,"nodeType":"117","messageId":"118","endLine":6,"endColumn":11},{"ruleId":"115","severity":1,"message":"133","line":7,"column":8,"nodeType":"117","messageId":"118","endLine":7,"endColumn":17},{"ruleId":"115","severity":1,"message":"134","line":8,"column":8,"nodeType":"117","messageId":"118","endLine":8,"endColumn":11},{"ruleId":"115","severity":1,"message":"116","line":10,"column":9,"nodeType":"117","messageId":"118","endLine":10,"endColumn":13},{"ruleId":"115","severity":1,"message":"125","line":10,"column":15,"nodeType":"117","messageId":"118","endLine":10,"endColumn":19},{"ruleId":"115","severity":1,"message":"135","line":11,"column":27,"nodeType":"117","messageId":"118","endLine":11,"endColumn":31},{"ruleId":"115","severity":1,"message":"136","line":12,"column":8,"nodeType":"117","messageId":"118","endLine":12,"endColumn":17},{"ruleId":"115","severity":1,"message":"126","line":13,"column":8,"nodeType":"117","messageId":"118","endLine":13,"endColumn":16},{"ruleId":"115","severity":1,"message":"121","line":14,"column":8,"nodeType":"117","messageId":"118","endLine":14,"endColumn":12},{"ruleId":"115","severity":1,"message":"137","line":15,"column":10,"nodeType":"117","messageId":"118","endLine":15,"endColumn":17},{"ruleId":"115","severity":1,"message":"138","line":16,"column":8,"nodeType":"117","messageId":"118","endLine":16,"endColumn":11},{"ruleId":"139","severity":1,"message":"140","line":28,"column":5,"nodeType":"141","messageId":"142","endLine":30,"endColumn":6},{"ruleId":"107","replacedBy":"143"},{"ruleId":"109","replacedBy":"144"},{"ruleId":"115","severity":1,"message":"116","line":10,"column":9,"nodeType":"117","messageId":"118","endLine":10,"endColumn":13},{"ruleId":"115","severity":1,"message":"125","line":10,"column":15,"nodeType":"117","messageId":"118","endLine":10,"endColumn":19},{"ruleId":"115","severity":1,"message":"135","line":11,"column":27,"nodeType":"117","messageId":"118","endLine":11,"endColumn":31},{"ruleId":"115","severity":1,"message":"137","line":15,"column":10,"nodeType":"117","messageId":"118","endLine":15,"endColumn":17},{"ruleId":"115","severity":1,"message":"138","line":16,"column":8,"nodeType":"117","messageId":"118","endLine":16,"endColumn":11},{"ruleId":"115","severity":1,"message":"145","line":18,"column":8,"nodeType":"117","messageId":"118","endLine":18,"endColumn":14},{"ruleId":"146","severity":1,"message":"147","line":111,"column":41,"nodeType":"148","messageId":"149","endLine":111,"endColumn":42},{"ruleId":"146","severity":1,"message":"147","line":111,"column":92,"nodeType":"148","messageId":"149","endLine":111,"endColumn":93},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],["150"],["151"],["150"],["151"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'callBack' is defined but never used.","'Rome' is defined but never used.",["150"],["151"],"'web3' is defined but never used.","'Form' is defined but never used.","'Mushroom' is defined but never used.","'Invest' is defined but never used.","'Liquidate' is defined but never used.",["150"],["151"],"'logo' is defined but never used.","'Row' is defined but never used.","'Container' is defined but never used.","'Col' is defined but never used.","'Text' is defined but never used.","'Dashboard' is defined but never used.","'flexbox' is defined but never used.","'Box' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["150"],["151"],"'statue' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]