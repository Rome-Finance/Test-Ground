[{"/home/darkdark/block_projs/Test-Ground/test_interface/src/reportWebVitals.js":"1","/home/darkdark/block_projs/Test-Ground/test_interface/src/App.js":"2","/home/darkdark/block_projs/Test-Ground/test_interface/src/index.js":"3","/home/darkdark/block_projs/Test-Ground/test_interface/src/web3.js":"4","/home/darkdark/block_projs/Test-Ground/test_interface/src/Mushroom.js":"5","/home/darkdark/block_projs/Test-Ground/test_interface/src/Rome.js":"6","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Invest.js":"7","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Liquidate.js":"8","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Dashboard.js":"9"},{"size":362,"mtime":1606203103037,"results":"10","hashOfConfig":"11"},{"size":5799,"mtime":1606203102997,"results":"12","hashOfConfig":"11"},{"size":500,"mtime":1606203103021,"results":"13","hashOfConfig":"11"},{"size":198,"mtime":1606204989948,"results":"14","hashOfConfig":"11"},{"size":12199,"mtime":1606206154857,"results":"15","hashOfConfig":"11"},{"size":8349,"mtime":1606250354082,"results":"16","hashOfConfig":"11"},{"size":4009,"mtime":1606204382964,"results":"17","hashOfConfig":"11"},{"size":3647,"mtime":1606288756321,"results":"18","hashOfConfig":"11"},{"size":3308,"mtime":1606434900308,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"svof1w",{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/home/darkdark/block_projs/Test-Ground/test_interface/src/reportWebVitals.js",[],["43","44"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/App.js",["45","46","47","48","49","50"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/index.js",[],["51","52"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/web3.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/Mushroom.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/Rome.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Invest.js",["53"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n    console.warn(\"balance ballls ballls balls ballllsss\");\r\n}\r\n\r\nclass Invest extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            amount : 0\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    invest = async event =>{\r\n        console.log(\"EYYYYYY\");\r\n\r\n        event.preventDefault();\r\n        try {\r\n            var accounts;\r\n            await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n\r\n            console.log(accounts[0]);\r\n\r\n            //const batch = new web3.eth.BatchRequest();\r\n\r\n            const weiValue = web3.utils.toWei(this.state.amount, 'ether');\r\n\r\n\r\n            /*\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            */\r\n\r\n            /*\r\n            batch.add(Rome.methods.approve(Mushroom.options.address, weiValue).send.request({from: accounts[0]}, callBack));\r\n            batch.add(Mushroom.methods.stake(weiValue).send.request({from: accounts[0]}, callBack));\r\n            */\r\n\r\n            await Rome.methods.approve(Mushroom.options.address, weiValue).send({from: accounts[0]});\r\n            await Mushroom.methods.stake(weiValue).send({from: accounts[0]});\r\n\r\n\r\n            /*\r\n            const params = { to: token.address, data: contractData, from: address };\r\n            batch.add(web3.eth.call.request(params, callBack));\r\n            */\r\n\r\n            /*\r\n            .call(from:accounts[0]))\r\n            batch.add(Mushroom.methods\r\n                .mint(this.state.amount) // contains the user account name\r\n                .send({\r\n                    from: accounts[0]\r\n                }));\r\n\r\n             */\r\n            // batches let you put more than one transaction together to be processed at one\r\n            // need them for approve transfer, then transferfrom when using erc tokens\r\n            //await batch.execute();\r\n\r\n            //await Rome.methods.buyRome(this.state.amount).send({from: accounts[0], value: this.state.amount*10000000000000000, gas: 100000000000000});\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR IN SENDING TO CHAIN \" + err);\r\n            this.setState({\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Card style={{\r\n                    backgroundColor: '#fd00ff'\r\n                }}>\r\n\r\n\r\n                <h4 style={{ color: 'Black', fluid: false }}>Invest USDC</h4 >\r\n                <Form.Field >\r\n                    <input\r\n                        style={{width:'80%'}}\r\n                        placeholder=\"How many USDC tokens would you like to invest?\"\r\n                        onChange={event =>\r\n                            this.setState({\r\n                                amount: event.target.value\r\n                            })\r\n                        }\r\n                    />\r\n                </Form.Field>\r\n                <br/>\r\n                <h4 style={{ color: 'Black', margin: 0, }} align=\"center\">   Tokens will be used for investments and you will get MUSH tokens based on your share of the investment pool. (Approve Both Transactions)</h4>\r\n                    <br/>\r\n\r\n\r\n                <button id={'setLocation'} className={'btn btn-md btn-success'} style={{color:'black'}} onClick={this.invest}>\r\n                    <span>Invest Tokens</span>\r\n                </button>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Invest;\r\n","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Liquidate.js",["54"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n    console.warn(\"balance ballls ballls balls ballllsss\");\r\n}\r\n\r\nclass Liquidate extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            amount : 0\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    invest = async event =>{\r\n        console.log(\"EYYYYYY\");\r\n\r\n        event.preventDefault();\r\n        try {\r\n            var accounts;\r\n            await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n\r\n            console.log(accounts[0]);\r\n\r\n            const batch = new web3.eth.BatchRequest();\r\n\r\n            const weiValue = web3.utils.toWei(this.state.amount, 'ether');\r\n\r\n            /*\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            */\r\n\r\n            batch.add(Mushroom.methods.unstake(weiValue).send.request({from: accounts[0]}, callBack));\r\n\r\n\r\n\r\n            /*\r\n            const params = { to: token.address, data: contractData, from: address };\r\n            batch.add(web3.eth.call.request(params, callBack));\r\n            */\r\n\r\n            /*\r\n            .call(from:accounts[0]))\r\n            batch.add(Mushroom.methods\r\n                .mint(this.state.amount) // contains the user account name\r\n                .send({\r\n                    from: accounts[0]\r\n                }));\r\n\r\n             */\r\n            // batches let you put more than one transaction together to be processed at one\r\n            // need them for approve transfer, then transferfrom when using erc tokens\r\n            await batch.execute();\r\n\r\n            //await Rome.methods.buyRome(this.state.amount).send({from: accounts[0], value: this.state.amount*10000000000000000, gas: 100000000000000});\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR IN SENDING TO CHAIN \" + err);\r\n            this.setState({\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Card style={{\r\n                    backgroundColor: '#fd00ff'\r\n                }}>\r\n\r\n\r\n                <h4 style={{ color: 'Black', fluid: false }}>Remove Funds</h4 >\r\n                <Form.Field >\r\n                    <input\r\n                        style={{width:'80%'}}\r\n                        placeholder=\"How many Mushroom tokens would you like to exchange?\"\r\n                        onChange={event =>\r\n                            this.setState({\r\n                                amount: event.target.value\r\n                            })\r\n                        }\r\n                    />\r\n                </Form.Field>\r\n                <br/>\r\n                <h4 style={{ color: 'Black', margin: 0  }}>   Your mushrooms will be BURNED and you will receive an equivalent stake of the pool if funds are available, and not currently tied up in investments.</h4>\r\n                    <button id={'setLocation'} className={'btn btn-md btn-success'} style={{color:'black'}} onClick={this.invest}>\r\n                    <span>Remove Funds</span>\r\n                </button>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Liquidate;\r\n","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Dashboard.js",["55","56","57"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n    console.warn(\"balance ballls ballls balls ballllsss\");\r\n}\r\n\r\nclass Dashboard extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            TotalMush : 0,\r\n            TotalUsdc: 0,\r\n            EstimatedUsdcValue: 0,\r\n            UserMush: 0,\r\n            UserUsdc: 0\r\n        };\r\n        this.updateDash = this.updateDash.bind(this);\r\n        this.updateDash();\r\n    }\r\n\r\n\r\n\r\n    async updateDash(){\r\n        var accounts;\r\n        await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n        \r\n        let total_mush = await Mushroom.methods.totalSupply().call();\r\n        let user_mush = await Mushroom.methods.balanceOf(accounts[0]).call();\r\n\r\n        let est_value = await Mushroom.methods.viewEstValue().call();\r\n\r\n        let total_usdc = await Rome.methods.balanceOf(Mushroom.options.address).call();\r\n        let user_usdc = await Rome.methods.balanceOf(accounts[0]).call();\r\n        \r\n        total_mush = web3.utils.fromWei(total_mush, 'ether');\r\n        user_mush = web3.utils.fromWei(user_mush, 'ether');\r\n        est_value = web3.utils.fromWei(est_value, 'ether');\r\n        total_usdc = web3.utils.fromWei(total_usdc, 'ether');\r\n        user_usdc = web3.utils.fromWei(user_usdc, 'ether');\r\n\r\n\r\n        this.setState({TotalMush:total_mush, UserMush: user_mush, TotalUsdc: total_usdc, UserUsdc: user_usdc, EstimatedUsdcValue: est_value });\r\n    }\r\n\r\n/*\r\n<pre style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC' }}>{'' +\r\n                'Total MUSH Supply:      ${Total_Mush} MUSH\\n' +\r\n                'Your MUSH Holdings:     ${this.state.UserMush} MUSH'}\r\n */\r\n\r\n    render() {\r\n        var Total_Mush = <pre style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC' }}>Total MUSH Supply                             {this.state.TotalMush} MUSH</pre>\r\n        var User_Mush = <pre style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC' }}>Your MUSH Holdings                            {this.state.UserMush} MUSH</pre>\r\n        var Total_Usdc = <pre style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC' }}>Total USDC Holdings of this Contract          {this.state.TotalUsdc} USDC</pre>\r\n        var User_Usdc = <pre style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC' }}>Your USDC Holdings (outside this project)     {this.state.UserUsdc} USDC</pre>\r\n        var Est_Value = <pre style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC' }}>Estimated Value of all Mushroom Assets        {this.state.EstimatedUsdcValue} USD </pre>\r\n\r\n\r\n        return(\r\n            <div>\r\n                <h2>\r\n                    {Total_Mush}\r\n                    {Total_Usdc}\r\n                    {Est_Value}\r\n                    <br/><br/>\r\n                    {User_Mush}\r\n                    {User_Usdc}\r\n                </h2>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Dashboard;\r\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":12},{"ruleId":"62","severity":1,"message":"66","line":10,"column":9,"nodeType":"64","messageId":"65","endLine":10,"endColumn":13},{"ruleId":"62","severity":1,"message":"67","line":10,"column":15,"nodeType":"64","messageId":"65","endLine":10,"endColumn":19},{"ruleId":"62","severity":1,"message":"68","line":11,"column":27,"nodeType":"64","messageId":"65","endLine":11,"endColumn":31},{"ruleId":"69","severity":1,"message":"70","line":105,"column":41,"nodeType":"71","messageId":"72","endLine":105,"endColumn":42},{"ruleId":"69","severity":1,"message":"70","line":105,"column":92,"nodeType":"71","messageId":"72","endLine":105,"endColumn":93},{"ruleId":"58","replacedBy":"73"},{"ruleId":"60","replacedBy":"74"},{"ruleId":"62","severity":1,"message":"75","line":10,"column":10,"nodeType":"64","messageId":"65","endLine":10,"endColumn":18},{"ruleId":"62","severity":1,"message":"76","line":5,"column":8,"nodeType":"64","messageId":"65","endLine":5,"endColumn":12},{"ruleId":"62","severity":1,"message":"66","line":3,"column":9,"nodeType":"64","messageId":"65","endLine":3,"endColumn":13},{"ruleId":"62","severity":1,"message":"67","line":3,"column":15,"nodeType":"64","messageId":"65","endLine":3,"endColumn":19},{"ruleId":"62","severity":1,"message":"75","line":10,"column":10,"nodeType":"64","messageId":"65","endLine":10,"endColumn":18},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Form' is defined but never used.","'Text' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["77"],["78"],"'callBack' is defined but never used.","'Rome' is defined but never used.","no-global-assign","no-unsafe-negation"]