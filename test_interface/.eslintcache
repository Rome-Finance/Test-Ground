[{"/home/darkdark/block_projs/Test-Ground/test_interface/src/reportWebVitals.js":"1","/home/darkdark/block_projs/Test-Ground/test_interface/src/App.js":"2","/home/darkdark/block_projs/Test-Ground/test_interface/src/index.js":"3","/home/darkdark/block_projs/Test-Ground/test_interface/src/web3.js":"4","/home/darkdark/block_projs/Test-Ground/test_interface/src/Mushroom.js":"5","/home/darkdark/block_projs/Test-Ground/test_interface/src/Rome.js":"6","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Invest.js":"7","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Liquidate.js":"8","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Dashboard.js":"9"},{"size":362,"mtime":1606203103037,"results":"10","hashOfConfig":"11"},{"size":1923,"mtime":1606203102997,"results":"12","hashOfConfig":"11"},{"size":500,"mtime":1606203103021,"results":"13","hashOfConfig":"11"},{"size":198,"mtime":1606204989948,"results":"14","hashOfConfig":"11"},{"size":12199,"mtime":1606206154857,"results":"15","hashOfConfig":"11"},{"size":8349,"mtime":1606250354082,"results":"16","hashOfConfig":"11"},{"size":4009,"mtime":1606204382964,"results":"17","hashOfConfig":"11"},{"size":3647,"mtime":1606288756321,"results":"18","hashOfConfig":"11"},{"size":3308,"mtime":1606434900308,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"svof1w",{"filePath":"23","messages":"24","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/darkdark/block_projs/Test-Ground/test_interface/src/reportWebVitals.js",[],["44","45"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/App.js",["46","47","48","49","50","51","52"],"import logo from './logo.svg';\nimport './App.css';\nimport web3 from \"./web3\";\nimport Invest from \"./components/Invest\";\nimport Liquidate from \"./components/Liquidate\";\nimport Row from 'react-bootstrap/Row'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Card, Form} from \"semantic-ui-react\";\nimport {React, Text} from \"react\";\nimport Dashboard from \"./components/Dashboard\";\n\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{\n        backgroundImage: \"url(\" + \"https://images8.alphacoders.com/600/600182.jpg\" + \")\",\n        backgroundPosition: 'center',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat'\n    }}>\n      <header className=\"App-header\" style={{\n          backgroundColor: 'transparent'\n      }}>\n          <h1 style={{ color: 'white', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC' }}>\n              Welcome to Mushroom Capital\n          </h1>\n          <br/><br/><br/><br/><br/>\n          <Dashboard/>\n      </header>\n        <Container>\n\n            <Row>\n                <Col sm>\n                    <Invest/>\n                </Col>\n                <Col sm>\n                    <Liquidate/>\n                </Col>\n            </Row>\n        </Container>\n        <header className=\"App-header\" style={{\n            backgroundColor: 'transparent'\n        }}>\n            <h3 style={{ color: 'EBEBEB', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC'   }}>\n                All initial investments are subject to up to a 1 month holding period to account for slippage.\n            </h3>\n            <h3 style={{ color: 'EBEBEB', margin: 0, 'text-shadow': '0px 0px 2px #35FFEC'   }}>\n                Prices may fluctuate, and Mushroom Capital is not responsible for temporary or permanent loss of funds.\n            </h3>\n        </header>\n    </div>\n  );\n}\n\nexport default App;\n",["53","54"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/index.js",[],["55","56"],"/home/darkdark/block_projs/Test-Ground/test_interface/src/web3.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/Mushroom.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/Rome.js",[],"/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Invest.js",["57"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n    console.warn(\"balance ballls ballls balls ballllsss\");\r\n}\r\n\r\nclass Invest extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            amount : 0\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    invest = async event =>{\r\n        console.log(\"EYYYYYY\");\r\n\r\n        event.preventDefault();\r\n        try {\r\n            var accounts;\r\n            await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n\r\n            console.log(accounts[0]);\r\n\r\n            //const batch = new web3.eth.BatchRequest();\r\n\r\n            const weiValue = web3.utils.toWei(this.state.amount, 'ether');\r\n\r\n\r\n            /*\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            */\r\n\r\n            /*\r\n            batch.add(Rome.methods.approve(Mushroom.options.address, weiValue).send.request({from: accounts[0]}, callBack));\r\n            batch.add(Mushroom.methods.stake(weiValue).send.request({from: accounts[0]}, callBack));\r\n            */\r\n\r\n            await Rome.methods.approve(Mushroom.options.address, weiValue).send({from: accounts[0]});\r\n            await Mushroom.methods.stake(weiValue).send({from: accounts[0]});\r\n\r\n\r\n            /*\r\n            const params = { to: token.address, data: contractData, from: address };\r\n            batch.add(web3.eth.call.request(params, callBack));\r\n            */\r\n\r\n            /*\r\n            .call(from:accounts[0]))\r\n            batch.add(Mushroom.methods\r\n                .mint(this.state.amount) // contains the user account name\r\n                .send({\r\n                    from: accounts[0]\r\n                }));\r\n\r\n             */\r\n            // batches let you put more than one transaction together to be processed at one\r\n            // need them for approve transfer, then transferfrom when using erc tokens\r\n            //await batch.execute();\r\n\r\n            //await Rome.methods.buyRome(this.state.amount).send({from: accounts[0], value: this.state.amount*10000000000000000, gas: 100000000000000});\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR IN SENDING TO CHAIN \" + err);\r\n            this.setState({\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Card style={{\r\n                    backgroundColor: '#fd00ff'\r\n                }}>\r\n\r\n\r\n                <h4 style={{ color: 'Black', fluid: false }}>Invest USDC</h4 >\r\n                <Form.Field >\r\n                    <input\r\n                        style={{width:'80%'}}\r\n                        placeholder=\"How many USDC tokens would you like to invest?\"\r\n                        onChange={event =>\r\n                            this.setState({\r\n                                amount: event.target.value\r\n                            })\r\n                        }\r\n                    />\r\n                </Form.Field>\r\n                <br/>\r\n                <h4 style={{ color: 'Black', margin: 0, }} align=\"center\">   Tokens will be used for investments and you will get MUSH tokens based on your share of the investment pool. (Approve Both Transactions)</h4>\r\n                    <br/>\r\n\r\n\r\n                <button id={'setLocation'} className={'btn btn-md btn-success'} style={{color:'black'}} onClick={this.invest}>\r\n                    <span>Invest Tokens</span>\r\n                </button>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Invest;\r\n","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Liquidate.js",["58"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n    console.warn(\"balance ballls ballls balls ballllsss\");\r\n}\r\n\r\nclass Liquidate extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            amount : 0\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    invest = async event =>{\r\n        console.log(\"EYYYYYY\");\r\n\r\n        event.preventDefault();\r\n        try {\r\n            var accounts;\r\n            await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n\r\n            console.log(accounts[0]);\r\n\r\n            const batch = new web3.eth.BatchRequest();\r\n\r\n            const weiValue = web3.utils.toWei(this.state.amount, 'ether');\r\n\r\n            /*\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            */\r\n\r\n            batch.add(Mushroom.methods.unstake(weiValue).send.request({from: accounts[0]}, callBack));\r\n\r\n\r\n\r\n            /*\r\n            const params = { to: token.address, data: contractData, from: address };\r\n            batch.add(web3.eth.call.request(params, callBack));\r\n            */\r\n\r\n            /*\r\n            .call(from:accounts[0]))\r\n            batch.add(Mushroom.methods\r\n                .mint(this.state.amount) // contains the user account name\r\n                .send({\r\n                    from: accounts[0]\r\n                }));\r\n\r\n             */\r\n            // batches let you put more than one transaction together to be processed at one\r\n            // need them for approve transfer, then transferfrom when using erc tokens\r\n            await batch.execute();\r\n\r\n            //await Rome.methods.buyRome(this.state.amount).send({from: accounts[0], value: this.state.amount*10000000000000000, gas: 100000000000000});\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR IN SENDING TO CHAIN \" + err);\r\n            this.setState({\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Card style={{\r\n                    backgroundColor: '#fd00ff'\r\n                }}>\r\n\r\n\r\n                <h4 style={{ color: 'Black', fluid: false }}>Remove Funds</h4 >\r\n                <Form.Field >\r\n                    <input\r\n                        style={{width:'80%'}}\r\n                        placeholder=\"How many Mushroom tokens would you like to exchange?\"\r\n                        onChange={event =>\r\n                            this.setState({\r\n                                amount: event.target.value\r\n                            })\r\n                        }\r\n                    />\r\n                </Form.Field>\r\n                <br/>\r\n                <h4 style={{ color: 'Black', margin: 0  }}>   Your mushrooms will be BURNED and you will receive an equivalent stake of the pool if funds are available, and not currently tied up in investments.</h4>\r\n                    <button id={'setLocation'} className={'btn btn-md btn-success'} style={{color:'black'}} onClick={this.invest}>\r\n                    <span>Remove Funds</span>\r\n                </button>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Liquidate;\r\n","/home/darkdark/block_projs/Test-Ground/test_interface/src/components/Dashboard.js",["59","60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":8,"nodeType":"68","messageId":"69","endLine":1,"endColumn":12},{"ruleId":"66","severity":1,"message":"70","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":12},{"ruleId":"66","severity":1,"message":"71","line":10,"column":9,"nodeType":"68","messageId":"69","endLine":10,"endColumn":13},{"ruleId":"66","severity":1,"message":"72","line":10,"column":15,"nodeType":"68","messageId":"69","endLine":10,"endColumn":19},{"ruleId":"66","severity":1,"message":"73","line":11,"column":16,"nodeType":"68","messageId":"69","endLine":11,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":22,"column":33,"nodeType":"76","messageId":"77","endLine":22,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":22,"column":84,"nodeType":"76","messageId":"77","endLine":22,"endColumn":85},{"ruleId":"62","replacedBy":"78"},{"ruleId":"64","replacedBy":"79"},{"ruleId":"62","replacedBy":"80"},{"ruleId":"64","replacedBy":"81"},{"ruleId":"66","severity":1,"message":"82","line":10,"column":10,"nodeType":"68","messageId":"69","endLine":10,"endColumn":18},{"ruleId":"66","severity":1,"message":"83","line":5,"column":8,"nodeType":"68","messageId":"69","endLine":5,"endColumn":12},{"ruleId":"66","severity":1,"message":"71","line":3,"column":9,"nodeType":"68","messageId":"69","endLine":3,"endColumn":13},{"ruleId":"66","severity":1,"message":"72","line":3,"column":15,"nodeType":"68","messageId":"69","endLine":3,"endColumn":19},{"ruleId":"66","severity":1,"message":"82","line":10,"column":10,"nodeType":"68","messageId":"69","endLine":10,"endColumn":18},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'web3' is defined but never used.","'Card' is defined but never used.","'Form' is defined but never used.","'Text' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["84"],["85"],["84"],["85"],"'callBack' is defined but never used.","'Rome' is defined but never used.","no-global-assign","no-unsafe-negation"]